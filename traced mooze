-- ============================================
-- MOBILE & LOW-END EXECUTOR COMPATIBILITY LAYER
-- ============================================

local function safeCall(func, ...)
    local success, result = pcall(func, ...)
    return success and result or nil
end

-- Detect executor capabilities
local CAPABILITIES = {
    canHook = safeCall(function() return hookfunction ~= nil end) or false,
    canGetConnections = safeCall(function() return getconnections ~= nil end) or false,
    canGetUpvalues = safeCall(function() return getupvalues ~= nil end) or false,
    canIdentify = safeCall(function() return identifyexecutor ~= nil end) or false,
    canMetatable = safeCall(function() return getrawmetatable ~= nil end) or false,
}

-- Safe executor identification
local exe_name, exe_version = "Unknown", "1.0"
if CAPABILITIES.canIdentify then
    exe_name, exe_version = identifyexecutor()
end

-- Create a simple notification function
local function notify(title, message, duration)
    local notif = Instance.new("ScreenGui")
    notif.Name = "MoozeNotif"
    notif.Parent = game.CoreGui
    
    local frame = Instance.new("Frame")
    frame.Size = UDim2.new(0, 300, 0, 80)
    frame.Position = UDim2.new(1, -310, 0, 10)
    frame.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
    frame.BorderSizePixel = 2
    frame.BorderColor3 = Color3.fromRGB(255, 0, 0)
    frame.Parent = notif
    
    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, 8)
    corner.Parent = frame
    
    local titleLabel = Instance.new("TextLabel")
    titleLabel.Size = UDim2.new(1, -10, 0, 25)
    titleLabel.Position = UDim2.new(0, 5, 0, 5)
    titleLabel.BackgroundTransparency = 1
    titleLabel.Text = title
    titleLabel.Font = Enum.Font.SourceSansBold
    titleLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    titleLabel.TextSize = 16
    titleLabel.TextXAlignment = Enum.TextXAlignment.Left
    titleLabel.Parent = frame
    
    local msgLabel = Instance.new("TextLabel")
    msgLabel.Size = UDim2.new(1, -10, 0, 45)
    msgLabel.Position = UDim2.new(0, 5, 0, 30)
    msgLabel.BackgroundTransparency = 1
    msgLabel.Text = message
    msgLabel.Font = Enum.Font.SourceSans
    msgLabel.TextColor3 = Color3.fromRGB(200, 200, 200)
    msgLabel.TextSize = 14
    msgLabel.TextWrapped = true
    msgLabel.TextXAlignment = Enum.TextXAlignment.Left
    msgLabel.TextYAlignment = Enum.TextYAlignment.Top
    msgLabel.Parent = frame
    
    frame.Position = UDim2.new(1, 10, 0, 10)
    game:GetService("TweenService"):Create(frame, TweenInfo.new(0.3), {Position = UDim2.new(1, -310, 0, 10)}):Play()
    
    task.delay(duration or 5, function()
        game:GetService("TweenService"):Create(frame, TweenInfo.new(0.3), {Position = UDim2.new(1, 10, 0, 10)}):Play()
        task.wait(0.3)
        notif:Destroy()
    end)
end

print("[Mooze] Running on:", exe_name)
print("[Mooze] Hooking:", CAPABILITIES.canHook and "✓" or "✗")
print("[Mooze] Metatable:", CAPABILITIES.canMetatable and "✓" or "✗")

task.delay(1, function()
    notify("Mooze Loaded", "Running on: " .. exe_name, 4)
end)

-- ============================================
-- CONFIG
-- ============================================

local ConfigPresets = {
    ["Semi-Legit FOV"] = {
        ["Silent Aimbot"] = {
            FOV = { Enabled = true, Size = { X = 40 } },
            ["Movement Modifications"] = {
                ["Speed Modifications"] = {
                    Enabled = false,
                    Normal = { Multiplier = 30 }
                }
            }
        }
    },
    ["Semi-Legit No FOV"] = {
        ["Silent Aimbot"] = {
            FOV = { Enabled = false, Size = { X = 40 } },
            ["Movement Modifications"] = {
                ["Speed Modifications"] = {
                    Enabled = false,
                    Normal = { Multiplier = 30 }
                }
            }
        }
    },
    ["Blatant FOV"] = {
        ["Silent Aimbot"] = {
            FOV = { Enabled = true, Size = { X = 100 } },
            ["Movement Modifications"] = {
                ["Speed Modifications"] = {
                    Enabled = false,
                    Normal = { Multiplier = 150 }
                }
            }
        }
    },
    ["Blatant No FOV"] = {
        ["Silent Aimbot"] = {
            FOV = { Enabled = false, Size = { X = 100 } },
            ["Movement Modifications"] = {
                ["Speed Modifications"] = {
                    Enabled = false,
                    Normal = { Multiplier = 150 }
                }
            }
        }
    }
}

getgenv().Mooze = {
    Global = {
        Enabled = true,
        Keybind = "C"
    },
    ["Trigger Bot"] = {
        Enabled = false,
        Activation = {
            ["Activation Bind"] = "V"
        },
        FOV = {
            X = 5
        },
        Prediction = {
            X = 0.131,
            Y = 0.131,
            Z = 0.131  
        },
        ["Click Cooldown"] = 0.1,
        Weapons = {
            "Revolver",
            "Double Barrel",
            "Tactical SG",
            "Shotgun"
        }
    },
    ["Velocity Calculation"] = {
        Enabled = true,
        Magnitude = 10
    },
    ["Camera Aimbot"] = {
        Enabled = false,
        Keybind = "C",
        ["Hit Part"] = "HumanoidRootPart",
        Prediction = {
            X = 0,
            Y = 0,
            Z = 0
        },
        Snappiness = 1
    },
    ["Silent Aimbot"] = {
        Enabled = true,
        ["Hit Part"] = "Closest Point",
        FOV = {
            Enabled = true,
            Size = {
                X = 40
            },
            ["Weapons Configuration"] = {
                Enabled = false,
                Shotguns = {
                    X = 15
                },
                Pistols = {
                    X = 8
                }
            }
        },
        Prediction = {
            X = 0,
            Y = 0,
            Z = 0
        },
        ["Closest Point"] = {
            ["Point Scale"] = 1.0
        },
        ["Client Bullet Redirection"] = {
            Enabled = false,
            Prediction = {
                X = 0.131,
                Y = 0.131,
                Z = 0.131  
            },
            Weapons = {
                "M4A1",
                "AK47"
            }
        }
    },
    ["Movement Modifications"] = {
        ["Slowdown Modifications"] = {
            Enabled = false,
            Weapons = {
                ["M4A1"] = {
                    Multiplier = 0.1
                },
                ["AK47"] = {
                    Multiplier = 0.12
                },
                ["Pistol"] = {
                    Multiplier = 0.08
                },
                ["Shotgun"] = {
                    Multiplier = 0.15
                }
            }
        },
        ["Speed Modifications"] = {
            Enabled = false,
            Normal = {
                Multiplier = 30
            },
            ["Low Health"] = {
                Multiplier = 35
            },
            Reloading = {
                Multiplier = 35
            },
            Shooting = {
                Multiplier = 35
            }
        }
    },
    ["Weapon Modifications"] = {
        ["Spread Modifications"] = {
            Enabled = true,
            M4A1 = {
                Multiplier = 0.5
            },
            AK47 = {
                Multiplier = 0.7
            },
            Pistol = {
                Multiplier = 0.4
            },
            Shotgun = {
                Multiplier = 1.9
            }
        }
    }
}

-- ============================================
-- ANTI-CHEAT BYPASS
-- ============================================

if CAPABILITIES.canHook and CAPABILITIES.canGetConnections and CAPABILITIES.canGetUpvalues then
    print("[Mooze] Initializing AC bypass...")
    
    local Game_RunService = game:GetService("RunService")
    local Game_LogService = game:GetService("LogService")
    local Game_LogService_MessageOut = Game_LogService.MessageOut
    
    local function XVNP_L(CONNECTION)
        local s, e = pcall(function()
            local OPENAC_TABLE = getupvalues(CONNECTION.Function)[9]
            if OPENAC_TABLE then
                local OPENAC_FUNCTION = OPENAC_TABLE[1]
                
                setupvalue(OPENAC_FUNCTION, 14, function(...)
                    return function(...)
                        local args = {...}
                        if type(args[1]) == "table" and args[1][1] then
                            pcall(function()
                                if type(args[1][1]) == "userdata" then
                                    args[1][1]:Disconnect()
                                    args[1][2]:Disconnect()
                                    args[1][3]:Disconnect()
                                    args[1][4]:Disconnect()
                                end
                            end)
                        end 
                    end
                end)
                
                setupvalue(OPENAC_FUNCTION, 1, function(...)
                    task.wait(200)
                end)
                
                hookfunction(OPENAC_FUNCTION, function(...)
                    return {}
                end)
            end
        end)
        if not s then
            warn("[Mooze] AC bypass failed (non-critical):", e)
        end
    end
    
    local XVNP_LASTUPDATE = 0
    local XVNP_UPDATEINTERVAL = 10
    local Current_Connections = {}
    
    Game_RunService.Heartbeat:Connect(function()
        if tick() - XVNP_LASTUPDATE >= XVNP_UPDATEINTERVAL then
            XVNP_LASTUPDATE = tick()
            
            local success, connections = pcall(function()
                return getconnections(Game_LogService_MessageOut)
            end)
            
            if success and connections then
                for _, CONNECTION in ipairs(connections) do
                    if not table.find(Current_Connections, CONNECTION) then
                        table.insert(Current_Connections, CONNECTION)
                        task.spawn(XVNP_L, CONNECTION)
                    end
                end
            end
        end
    end)
else
    warn("[Mooze] AC bypass disabled - executor doesn't support required functions")
end

-- ============================================
-- GUI
-- ============================================

local accessGranted = false
local configSelected = false
local selectedConfig = nil
local otherThingLoaded = false
local isMobileMode = false

spawn(function()
    wait(1)
    otherThingLoaded = true
end)

local ScreenGui = Instance.new("ScreenGui")
local Frame = Instance.new("Frame")
local TitleBar = Instance.new("Frame")
local Icon = Instance.new("ImageLabel")
local TitleText = Instance.new("TextLabel")
local CloseButton = Instance.new("TextButton")
local MinimizeButton = Instance.new("TextButton")
local MaximizeButton = Instance.new("TextButton")
local TextLabel = Instance.new("TextLabel")
local KeyLabel = Instance.new("TextLabel")
local MobileButton = Instance.new("TextButton")

local UserInputService = game:GetService("UserInputService")
local TweenService = game:GetService("TweenService")
local player = game:GetService("Players").LocalPlayer
local Character = player.Character or player.CharacterAdded:Wait()
local Humanoid = Character:WaitForChild("Humanoid")
local originalWalkSpeed = Humanoid.WalkSpeed
local originalJumpPower = Humanoid.JumpPower

local correctKey = "traced"
local cursorColor = Color3.fromRGB(255, 255, 255)
local typedKeyColor = Color3.fromRGB(128, 128, 128)
local underlineLength = 1
local underlineChar = "▄"
local blinkSpeed = 0.5
local authDelay = 5
local hideDelay = 5
local typedKey = ""
local showUnderline = true
local canType = false
local isAuthenticating = false

ScreenGui.Name = "CST"
ScreenGui.Parent = game.CoreGui

Frame.Name = "MoozeFrame"
Frame.Parent = ScreenGui
Frame.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
Frame.Size = UDim2.new(0, 600, 0, 300)
Frame.Position = UDim2.new(0.5, -300, 0.5, -150)
Frame.ClipsDescendants = true

TitleBar.Name = "TitleBar"
TitleBar.Parent = Frame
TitleBar.BackgroundColor3 = Color3.fromRGB(10, 10, 10)
TitleBar.BorderSizePixel = 0
TitleBar.Size = UDim2.new(1, 0, 0, 28)
TitleBar.Position = UDim2.new(0, 0, 0, 0)
TitleBar.Active = true

Icon.Name = "TitleIcon"
Icon.Parent = TitleBar
Icon.BackgroundTransparency = 1
Icon.Size = UDim2.new(0, 16, 0, 16)
Icon.Position = UDim2.new(0, 6, 0, 6)
Icon.Image = "rbxassetid://128024012812354"

TitleText.Name = "TitleText"
TitleText.Parent = TitleBar
TitleText.BackgroundTransparency = 1
TitleText.Size = UDim2.new(0, 100, 1, 0)
TitleText.Position = UDim2.new(0, 28, 0, 0)
TitleText.Text = "Mooze"
TitleText.Font = Enum.Font.SourceSans
TitleText.TextColor3 = Color3.fromRGB(255, 255, 255)
TitleText.TextSize = 18
TitleText.TextXAlignment = Enum.TextXAlignment.Left

local TitleWatermark = Instance.new("TextLabel")
TitleWatermark.Name = "TitleWatermark"
TitleWatermark.Parent = TitleBar
TitleWatermark.BackgroundTransparency = 1
TitleWatermark.Size = UDim2.new(0, 300, 1, 0)
TitleWatermark.Position = UDim2.new(0.5, -150, 0, 0)
TitleWatermark.Text = "improved by .gg/traced | " .. exe_name
TitleWatermark.Font = Enum.Font.SourceSansBold
TitleWatermark.TextColor3 = Color3.fromRGB(255, 255, 255)
TitleWatermark.TextSize = 14
TitleWatermark.TextXAlignment = Enum.TextXAlignment.Center

CloseButton.Name = "CloseButton"
CloseButton.Parent = TitleBar
CloseButton.Size = UDim2.new(0, 40, 0, 28)
CloseButton.Position = UDim2.new(1, -40, 0, 0)
CloseButton.BackgroundTransparency = 1
CloseButton.Text = "X"
CloseButton.Font = Enum.Font.SourceSansBold
CloseButton.TextColor3 = Color3.fromRGB(255, 255, 255)
CloseButton.TextSize = 18

MinimizeButton.Name = "MinimizeButton"
MinimizeButton.Parent = TitleBar
MinimizeButton.Size = UDim2.new(0, 40, 0, 28)
MinimizeButton.Position = UDim2.new(1, -120, 0, 0)
MinimizeButton.BackgroundTransparency = 1
MinimizeButton.Text = "-"
MinimizeButton.Font = Enum.Font.SourceSansBold
MinimizeButton.TextColor3 = Color3.fromRGB(255, 255, 255)
MinimizeButton.TextSize = 24

MaximizeButton.Name = "MaximizeButton"
MaximizeButton.Parent = TitleBar
MaximizeButton.Size = UDim2.new(0, 40, 0, 28)
MaximizeButton.Position = UDim2.new(1, -80, 0, 0)
MaximizeButton.BackgroundTransparency = 1
MaximizeButton.Text = "▢"
MaximizeButton.Font = Enum.Font.SourceSansBold
MaximizeButton.TextColor3 = Color3.fromRGB(255, 255, 255)
MaximizeButton.TextSize = 18
MaximizeButton.Visible = false

MobileButton.Name = "MobileButton"
MobileButton.Parent = ScreenGui
MobileButton.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
MobileButton.BorderSizePixel = 0
MobileButton.Size = UDim2.new(0, 140, 0, 50)
MobileButton.Font = Enum.Font.SourceSansBold
MobileButton.Text = "Mobile Mode"
MobileButton.TextColor3 = Color3.fromRGB(255, 255, 255)
MobileButton.TextSize = 14
MobileButton.AutoButtonColor = false

-- Position mobile button to the right of the frame
local function updateMobileButtonPosition()
    local framePos = Frame.AbsolutePosition
    local frameSize = Frame.AbsoluteSize
    MobileButton.Position = UDim2.new(0, framePos.X + frameSize.X + 10, 0, framePos.Y)
end

-- Update position initially and when frame moves
updateMobileButtonPosition()
Frame:GetPropertyChangedSignal("AbsolutePosition"):Connect(updateMobileButtonPosition)

local dragging = false
local dragInput, dragStart, startPos
local function update(input)
    local delta = input.Position - dragStart
    Frame.Position = UDim2.new(Frame.Position.X.Scale, startPos.X.Offset + delta.X, Frame.Position.Y.Scale, startPos.Y.Offset + delta.Y)
end

TitleBar.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
        dragging = true
        dragStart = input.Position
        startPos = Frame.Position
        input.Changed:Connect(function()
            if input.UserInputState == Enum.UserInputState.End then
                dragging = false
            end
        end)
    end
end)

TitleBar.InputChanged:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
        dragInput = input
    end
end)

UserInputService.InputChanged:Connect(function(input)
    if dragging and input == dragInput then
        update(input)
    end
end)

local normalSize = Frame.Size
local normalContentVisible = true

MinimizeButton.MouseButton1Click:Connect(function()
    if normalContentVisible then
        TweenService:Create(Frame, TweenInfo.new(0.2), {Size = UDim2.new(normalSize.X.Scale, normalSize.X.Offset, 0, TitleBar.Size.Y.Offset)}):Play()
        TextLabel.Visible = false
        KeyLabel.Visible = false
        MaximizeButton.Visible = true
        normalContentVisible = false
    end
end)

MaximizeButton.MouseButton1Click:Connect(function()
    if not normalContentVisible then
        TweenService:Create(Frame, TweenInfo.new(0.2), {Size = normalSize}):Play()
        TextLabel.Visible = true
        KeyLabel.Visible = true
        MaximizeButton.Visible = false
        normalContentVisible = true
    end
end)

CloseButton.MouseButton1Click:Connect(function()
    ScreenGui:Destroy()
end)

TextLabel.Name = "MoozeASCII"
TextLabel.Parent = Frame
TextLabel.BackgroundTransparency = 1
TextLabel.Size = UDim2.new(1, 0, 0.6, 0)
TextLabel.Position = UDim2.new(0, 0, 0.12, 0)
TextLabel.Font = Enum.Font.Code
TextLabel.Text = [[
ooo        ooooo     .oooooo.      .oooooo.      oooooooooooo   oooooooooooo
`88.       .888'    d8P'  `Y8b    d8P'  `Y8b    d'''""""'888'        `888'     
 888b     d'888    888      888  888      888         .888P         888       
 8 Y88. .P  888    888      888  888      888        d888'          888oooo8  
 8  `888'   888    888      888  888      888      .888P            888    "  
 8    Y     888    `88b    d88'  `88b    d88'     d888'    .P       888       
o8o        o888o    `Y8bood8P'    `Y8bood8P'    .8888888888P      o888ooooood8
]]
TextLabel.TextColor3 = Color3.fromRGB(128, 128, 128)
TextLabel.TextSize = 12
TextLabel.TextWrapped = true
TextLabel.TextXAlignment = Enum.TextXAlignment.Center
TextLabel.TextYAlignment = Enum.TextYAlignment.Center

KeyLabel.Name = "KeyLabel"
KeyLabel.Parent = Frame
KeyLabel.BackgroundTransparency = 1
KeyLabel.Position = UDim2.new(0, 29, 0, 200)
KeyLabel.Size = UDim2.new(0.7, 0, 0.1, 0)
KeyLabel.Font = Enum.Font.Code
KeyLabel.RichText = true
KeyLabel.TextColor3 = Color3.fromRGB(128, 128, 128)
KeyLabel.TextSize = 12
KeyLabel.TextXAlignment = Enum.TextXAlignment.Left
KeyLabel.TextYAlignment = Enum.TextYAlignment.Center
KeyLabel.Active = true

local function updateKeyLabel()
    if isAuthenticating then return end
    local underline = showUnderline and string.rep(underlineChar, underlineLength) or ""
    KeyLabel.Text = string.format('[<font color="rgb(255,0,0)">-</font>] Key: <font color="rgb(%d,%d,%d)">%s</font><font color="rgb(%d,%d,%d)">%s</font>', 
        typedKeyColor.R*255, typedKeyColor.G*255, typedKeyColor.B*255, typedKey, 
        cursorColor.R*255, cursorColor.G*255, cursorColor.B*255, underline)
end

task.spawn(function()
    while true do
        if not isAuthenticating then
            showUnderline = not showUnderline
            updateKeyLabel()
        end
        wait(blinkSpeed)
    end
end)

local function proceedToExecutorInfo()
    isAuthenticating = true
    KeyLabel.Text = '[<font color="rgb(255,0,0)">-</font>] Authenticating...'
    wait(authDelay)
    repeat task.wait() until otherThingLoaded
    
    TextLabel.Visible = false
    KeyLabel.Visible = false
    MobileButton.Visible = false
    
    showExecutorInfo()
end

MobileButton.MouseButton1Click:Connect(function()
    isMobileMode = true
    print("[Mooze] Mobile Mode button clicked - isMobileMode set to TRUE")
    proceedToExecutorInfo()
end)

local keyMapping = {
    Zero="0", One="1", Two="2", Three="3", Four="4", Five="5", Six="6", Seven="7", Eight="8", Nine="9", 
    Comma=",", Period=".", Slash="/", BackSlash="\\", Semicolon=";", Quote="'", Minus="-", Equal="=", 
    Grave="`", LeftBracket="[", RightBracket="]", 
    F1="F1", F2="F2", F3="F3", F4="F4", F5="F5", F6="F6", F7="F7", F8="F8", F9="F9", F10="F10", F11="F11", F12="F12", 
    Space=" ", Tab="\t", CapsLock="CapsLock", Insert="Insert", Delete="Delete", Home="Home", End="End", 
    PageUp="PageUp", PageDown="PageDown", Up="↑", Down="↓", Left="←", Right="→"
}

UserInputService.InputBegan:Connect(function(input, gameProcessed)
    if gameProcessed then return end
    if canType and input.UserInputType == Enum.UserInputType.Keyboard then
        if input.KeyCode == Enum.KeyCode.Return then
            canType = false
            Humanoid.WalkSpeed = originalWalkSpeed
            Humanoid.JumpPower = originalJumpPower
            if typedKey == correctKey then
                isMobileMode = false
                print("[Mooze] PC Mode (typed key) - isMobileMode set to FALSE")
                proceedToExecutorInfo()
            else
                player:Kick("Invalid Key")
            end
            updateKeyLabel()
        elseif input.KeyCode == Enum.KeyCode.Backspace then
            typedKey = typedKey:sub(1, -2)
            updateKeyLabel()
        else
            local keyStr = input.KeyCode.Name
            if #keyStr == 1 then
                typedKey = typedKey .. keyStr:lower()
            elseif keyMapping[keyStr] then
                typedKey = typedKey .. keyMapping[keyStr]
            end
            updateKeyLabel()
        end
    end
end)

UserInputService.InputBegan:Connect(function(input, gameProcessed)
    if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
        local mousePos = input.Position
        local absPos = KeyLabel.AbsolutePosition
        local absSize = KeyLabel.AbsoluteSize
        if mousePos.X >= absPos.X and mousePos.X <= absPos.X + absSize.X and mousePos.Y >= absPos.Y and mousePos.Y <= absPos.Y + absSize.Y then
            canType = true
            typedKey = ""
            updateKeyLabel()
            originalWalkSpeed = Humanoid.WalkSpeed
            originalJumpPower = Humanoid.JumpPower
            Humanoid.WalkSpeed = 0
            Humanoid.JumpPower = 0
        else
            if canType then
                Humanoid.WalkSpeed = originalWalkSpeed
                Humanoid.JumpPower = originalJumpPower
            end
            canType = false
            updateKeyLabel()
        end
    end
end)

updateKeyLabel()

-- ============================================
-- EXECUTOR INFO SCREEN (NEW)
-- ============================================

function showExecutorInfo()
    for _, child in pairs(Frame:GetChildren()) do
        if child ~= TitleBar then
            child:Destroy()
        end
    end
    
    local ExecutorTitle = Instance.new("TextLabel")
    ExecutorTitle.Name = "ExecutorTitle"
    ExecutorTitle.Parent = Frame
    ExecutorTitle.BackgroundTransparency = 1
    ExecutorTitle.Position = UDim2.new(0, 0, 0, 40)
    ExecutorTitle.Size = UDim2.new(1, 0, 0, 30)
    ExecutorTitle.Font = Enum.Font.SourceSansBold
    ExecutorTitle.Text = "Executor: " .. exe_name
    ExecutorTitle.TextColor3 = Color3.fromRGB(255, 0, 0)
    ExecutorTitle.TextSize = 20
    ExecutorTitle.TextXAlignment = Enum.TextXAlignment.Center
    
    local ScrollFrame = Instance.new("ScrollingFrame")
    ScrollFrame.Name = "FeaturesList"
    ScrollFrame.Parent = Frame
    ScrollFrame.BackgroundColor3 = Color3.fromRGB(5, 5, 5)
    ScrollFrame.BorderSizePixel = 0
    ScrollFrame.Position = UDim2.new(0.5, -260, 0, 80)
    ScrollFrame.Size = UDim2.new(0, 520, 0, 150)
    ScrollFrame.CanvasSize = UDim2.new(0, 0, 0, 0)
    ScrollFrame.ScrollBarThickness = 6
    ScrollFrame.ScrollBarImageColor3 = Color3.fromRGB(255, 0, 0)
    
    local ScrollCorner = Instance.new("UICorner")
    ScrollCorner.CornerRadius = UDim.new(0, 8)
    ScrollCorner.Parent = ScrollFrame
    
    local ListLayout = Instance.new("UIListLayout")
    ListLayout.Parent = ScrollFrame
    ListLayout.SortOrder = Enum.SortOrder.LayoutOrder
    ListLayout.Padding = UDim.new(0, 5)
    
    local features = {
        {name = "Silent Aimbot", status = CAPABILITIES.canMetatable, detail = CAPABILITIES.canMetatable and "Full metatable hooking" or "Limited mode (basic)"},
        {name = "Trigger Bot", status = true, detail = "Fully functional"},
        {name = "Camera Aimbot", status = true, detail = "Fully functional"},
        {name = "FOV Circle", status = true, detail = "Visual indicator"},
        {name = "Walkspeed Modifications", status = true, detail = "Event-based system"},
        {name = "Spread Modifications", status = true, detail = "Weapon accuracy control"},
        {name = "Rapid Fire", status = true, detail = "Auto fire system"},
        {name = "Anti-Cheat Bypass", status = CAPABILITIES.canHook and CAPABILITIES.canGetConnections and CAPABILITIES.canGetUpvalues, detail = CAPABILITIES.canHook and "AC protection enabled" or "Disabled - executor limited"}
    }
    
    local yOffset = 5
    for i, feature in ipairs(features) do
        local FeatureFrame = Instance.new("Frame")
        FeatureFrame.Name = "Feature" .. i
        FeatureFrame.Parent = ScrollFrame
        FeatureFrame.BackgroundColor3 = Color3.fromRGB(10, 10, 10)
        FeatureFrame.BorderSizePixel = 0
        FeatureFrame.Size = UDim2.new(1, -10, 0, 45)
        FeatureFrame.LayoutOrder = i
        
        local FeatureCorner = Instance.new("UICorner")
        FeatureCorner.CornerRadius = UDim.new(0, 6)
        FeatureCorner.Parent = FeatureFrame
        
        local StatusIndicator = Instance.new("Frame")
        StatusIndicator.Name = "StatusIndicator"
        StatusIndicator.Parent = FeatureFrame
        StatusIndicator.BackgroundColor3 = feature.status and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(255, 0, 0)
        StatusIndicator.BorderSizePixel = 0
        StatusIndicator.Position = UDim2.new(0, 10, 0.5, -8)
        StatusIndicator.Size = UDim2.new(0, 16, 0, 16)
        
        local IndicatorCorner = Instance.new("UICorner")
        IndicatorCorner.CornerRadius = UDim.new(1, 0)
        IndicatorCorner.Parent = StatusIndicator
        
        local FeatureName = Instance.new("TextLabel")
        FeatureName.Name = "FeatureName"
        FeatureName.Parent = FeatureFrame
        FeatureName.BackgroundTransparency = 1
        FeatureName.Position = UDim2.new(0, 35, 0, 5)
        FeatureName.Size = UDim2.new(1, -40, 0, 18)
        FeatureName.Font = Enum.Font.SourceSansBold
        FeatureName.Text = feature.name
        FeatureName.TextColor3 = Color3.fromRGB(255, 255, 255)
        FeatureName.TextSize = 14
        FeatureName.TextXAlignment = Enum.TextXAlignment.Left
        
        local FeatureDetail = Instance.new("TextLabel")
        FeatureDetail.Name = "FeatureDetail"
        FeatureDetail.Parent = FeatureFrame
        FeatureDetail.BackgroundTransparency = 1
        FeatureDetail.Position = UDim2.new(0, 35, 0, 23)
        FeatureDetail.Size = UDim2.new(1, -40, 0, 16)
        FeatureDetail.Font = Enum.Font.SourceSans
        FeatureDetail.Text = feature.detail
        FeatureDetail.TextColor3 = Color3.fromRGB(150, 150, 150)
        FeatureDetail.TextSize = 12
        FeatureDetail.TextXAlignment = Enum.TextXAlignment.Left
        
        yOffset = yOffset + 50
    end
    
    ScrollFrame.CanvasSize = UDim2.new(0, 0, 0, yOffset)
    
    local ContinueButton = Instance.new("TextButton")
    ContinueButton.Name = "ContinueButton"
    ContinueButton.Parent = Frame
    ContinueButton.BackgroundColor3 = Color3.fromRGB(10, 10, 10)
    ContinueButton.BorderColor3 = Color3.fromRGB(255, 0, 0)
    ContinueButton.BorderSizePixel = 2
    ContinueButton.Position = UDim2.new(0.5, -100, 0, 240)
    ContinueButton.Size = UDim2.new(0, 200, 0, 40)
    ContinueButton.Font = Enum.Font.SourceSansBold
    ContinueButton.Text = "CONTINUE"
    ContinueButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    ContinueButton.TextSize = 16
    ContinueButton.AutoButtonColor = false
    
    local ContinueCorner = Instance.new("UICorner")
    ContinueCorner.CornerRadius = UDim.new(0, 10)
    ContinueCorner.Parent = ContinueButton
    
    ContinueButton.MouseEnter:Connect(function()
        TweenService:Create(ContinueButton, TweenInfo.new(0.2), {BackgroundColor3 = Color3.fromRGB(20, 20, 20)}):Play()
    end)
    
    ContinueButton.MouseLeave:Connect(function()
        TweenService:Create(ContinueButton, TweenInfo.new(0.2), {BackgroundColor3 = Color3.fromRGB(10, 10, 10)}):Play()
    end)
    
    ContinueButton.MouseButton1Click:Connect(function()
        showConfigSelection()
    end)
end

-- ============================================
-- CONFIG SELECTION SCREEN
-- ============================================

function showConfigSelection()
    for _, child in pairs(Frame:GetChildren()) do
        if child ~= TitleBar then
            child:Destroy()
        end
    end
    
    local SelectTitle = Instance.new("TextLabel")
    SelectTitle.Name = "SelectTitle"
    SelectTitle.Parent = Frame
    SelectTitle.BackgroundTransparency = 1
    SelectTitle.Position = UDim2.new(0, 0, 0, 55)
    SelectTitle.Size = UDim2.new(1, 0, 0, 30)
    SelectTitle.Font = Enum.Font.SourceSansBold
    SelectTitle.Text = "Select Configuration"
    SelectTitle.TextColor3 = Color3.fromRGB(255, 0, 0)
    SelectTitle.TextSize = 20
    SelectTitle.TextXAlignment = Enum.TextXAlignment.Center
    
    local ButtonContainer = Instance.new("Frame")
    ButtonContainer.Name = "ButtonContainer"
    ButtonContainer.Parent = Frame
    ButtonContainer.BackgroundTransparency = 1
    ButtonContainer.Position = UDim2.new(0.5, -250, 0, 90)
    ButtonContainer.Size = UDim2.new(0, 500, 0, 180)
    
    local configs = {
        {name = "Semi-Legit FOV", preset = "Semi-Legit FOV"},
        {name = "Semi-Legit No FOV", preset = "Semi-Legit No FOV"},
        {name = "Blatant FOV", preset = "Blatant FOV"},
        {name = "Blatant No FOV", preset = "Blatant No FOV"}
    }
    
    for i, config in ipairs(configs) do
        local row = math.floor((i - 1) / 2)
        local col = (i - 1) % 2
        
        local ConfigButton = Instance.new("TextButton")
        ConfigButton.Name = config.name
        ConfigButton.Parent = ButtonContainer
        ConfigButton.BackgroundColor3 = Color3.fromRGB(10, 10, 10)
        ConfigButton.BorderColor3 = Color3.fromRGB(255, 0, 0)
        ConfigButton.BorderSizePixel = 2
        ConfigButton.Position = UDim2.new(col * 0.52, 0, row * 0.52, 0)
        ConfigButton.Size = UDim2.new(0.46, 0, 0.46, 0)
        ConfigButton.Font = Enum.Font.SourceSansBold
        ConfigButton.Text = config.name
        ConfigButton.TextColor3 = Color3.fromRGB(255, 255, 255)
        ConfigButton.TextSize = 14
        ConfigButton.TextWrapped = true
        ConfigButton.AutoButtonColor = false
        
        local Corner = Instance.new("UICorner")
        Corner.CornerRadius = UDim.new(0, 10)
        Corner.Parent = ConfigButton
        
        ConfigButton.MouseEnter:Connect(function()
            TweenService:Create(ConfigButton, TweenInfo.new(0.2), {BackgroundColor3 = Color3.fromRGB(20, 20, 20)}):Play()
        end)
        
        ConfigButton.MouseLeave:Connect(function()
            TweenService:Create(ConfigButton, TweenInfo.new(0.2), {BackgroundColor3 = Color3.fromRGB(10, 10, 10)}):Play()
        end)
        
        ConfigButton.MouseButton1Click:Connect(function()
            selectedConfig = config.preset
            showWalkspeedSelection(config.preset)
        end)
    end
end

-- ============================================
-- WALKSPEED SELECTION SCREEN
-- ============================================

function showWalkspeedSelection(presetName)
    for _, child in pairs(Frame:GetChildren()) do
        if child ~= TitleBar then
            child:Destroy()
        end
    end
    
    local WalkspeedTitle = Instance.new("TextLabel")
    WalkspeedTitle.Name = "WalkspeedTitle"
    WalkspeedTitle.Parent = Frame
    WalkspeedTitle.BackgroundTransparency = 1
    WalkspeedTitle.Position = UDim2.new(0, 0, 0, 55)
    WalkspeedTitle.Size = UDim2.new(1, 0, 0, 30)
    WalkspeedTitle.Font = Enum.Font.SourceSansBold
    WalkspeedTitle.Text = "Enable Walkspeed?"
    WalkspeedTitle.TextColor3 = Color3.fromRGB(255, 0, 0)
    WalkspeedTitle.TextSize = 20
    WalkspeedTitle.TextXAlignment = Enum.TextXAlignment.Center
    
    local ButtonContainer = Instance.new("Frame")
    ButtonContainer.Name = "ButtonContainer"
    ButtonContainer.Parent = Frame
    ButtonContainer.BackgroundTransparency = 1
    ButtonContainer.Position = UDim2.new(0.5, -200, 0, 120)
    ButtonContainer.Size = UDim2.new(0, 400, 0, 80)
    
    local YesButton = Instance.new("TextButton")
    YesButton.Name = "YesButton"
    YesButton.Parent = ButtonContainer
    YesButton.BackgroundColor3 = Color3.fromRGB(10, 10, 10)
    YesButton.BorderColor3 = Color3.fromRGB(0, 255, 0)
    YesButton.BorderSizePixel = 2
    YesButton.Position = UDim2.new(0, 0, 0, 0)
    YesButton.Size = UDim2.new(0.48, 0, 1, 0)
    YesButton.Font = Enum.Font.SourceSansBold
    YesButton.Text = "YES"
    YesButton.TextColor3 = Color3.fromRGB(0, 255, 0)
    YesButton.TextSize = 18
    YesButton.AutoButtonColor = false
    
    local YesCorner = Instance.new("UICorner")
    YesCorner.CornerRadius = UDim.new(0, 10)
    YesCorner.Parent = YesButton
    
    local NoButton = Instance.new("TextButton")
    NoButton.Name = "NoButton"
    NoButton.Parent = ButtonContainer
    NoButton.BackgroundColor3 = Color3.fromRGB(10, 10, 10)
    NoButton.BorderColor3 = Color3.fromRGB(255, 0, 0)
    NoButton.BorderSizePixel = 2
    NoButton.Position = UDim2.new(0.52, 0, 0, 0)
    NoButton.Size = UDim2.new(0.48, 0, 1, 0)
    NoButton.Font = Enum.Font.SourceSansBold
    NoButton.Text = "NO"
    NoButton.TextColor3 = Color3.fromRGB(255, 0, 0)
    NoButton.TextSize = 18
    NoButton.AutoButtonColor = false
    
    local NoCorner = Instance.new("UICorner")
    NoCorner.CornerRadius = UDim.new(0, 10)
    NoCorner.Parent = NoButton
    
    YesButton.MouseEnter:Connect(function()
        TweenService:Create(YesButton, TweenInfo.new(0.2), {BackgroundColor3 = Color3.fromRGB(20, 20, 20)}):Play()
    end)
    
    YesButton.MouseLeave:Connect(function()
        TweenService:Create(YesButton, TweenInfo.new(0.2), {BackgroundColor3 = Color3.fromRGB(10, 10, 10)}):Play()
    end)
    
    NoButton.MouseEnter:Connect(function()
        TweenService:Create(NoButton, TweenInfo.new(0.2), {BackgroundColor3 = Color3.fromRGB(20, 20, 20)}):Play()
    end)
    
    NoButton.MouseLeave:Connect(function()
        TweenService:Create(NoButton, TweenInfo.new(0.2), {BackgroundColor3 = Color3.fromRGB(10, 10, 10)}):Play()
    end)
    
    YesButton.MouseButton1Click:Connect(function()
        applyConfig(presetName, true)
        finishAuthentication()
    end)
    
    NoButton.MouseButton1Click:Connect(function()
        applyConfig(presetName, false)
        finishAuthentication()
    end)
end

function applyConfig(presetName, enableWalkspeed)
    local preset = ConfigPresets[presetName]
    if preset then
        if preset["Silent Aimbot"] then
            getgenv().Mooze["Silent Aimbot"]["FOV"]["Enabled"] = preset["Silent Aimbot"].FOV.Enabled
            getgenv().Mooze["Silent Aimbot"]["FOV"]["Size"]["X"] = preset["Silent Aimbot"].FOV.Size.X
        end
        
        if preset["Silent Aimbot"]["Movement Modifications"] then
            local speedMod = preset["Silent Aimbot"]["Movement Modifications"]["Speed Modifications"]
            getgenv().Mooze["Movement Modifications"]["Speed Modifications"]["Enabled"] = enableWalkspeed
            getgenv().Mooze["Movement Modifications"]["Speed Modifications"]["Normal"]["Multiplier"] = speedMod.Normal.Multiplier
            getgenv().Mooze["Movement Modifications"]["Speed Modifications"]["Low Health"]["Multiplier"] = speedMod.Normal.Multiplier + 5
            getgenv().Mooze["Movement Modifications"]["Speed Modifications"]["Reloading"]["Multiplier"] = speedMod.Normal.Multiplier + 5
            getgenv().Mooze["Movement Modifications"]["Speed Modifications"]["Shooting"]["Multiplier"] = speedMod.Normal.Multiplier + 5
        end
    end
    
    print("[Mooze] Applied config:", presetName)
    print("[Mooze] Walkspeed enabled:", enableWalkspeed)
    print("[Mooze] Speed multiplier:", getgenv().Mooze["Movement Modifications"]["Speed Modifications"]["Normal"]["Multiplier"])
end

function finishAuthentication()
    for _, child in pairs(Frame:GetChildren()) do
        if child ~= TitleBar then
            child:Destroy()
        end
    end
    
    local ClosingLabel = Instance.new("TextLabel")
    ClosingLabel.Name = "ClosingLabel"
    ClosingLabel.Parent = Frame
    ClosingLabel.BackgroundTransparency = 1
    ClosingLabel.Position = UDim2.new(0, 0, 0, 100)
    ClosingLabel.Size = UDim2.new(1, 0, 0, 100)
    ClosingLabel.Font = Enum.Font.Code
    ClosingLabel.RichText = true
    ClosingLabel.Text = '[<font color="rgb(255,0,0)">-</font>] Hiding console in <font color="rgb(255,0,0)">5.00</font> seconds!'
    ClosingLabel.TextColor3 = Color3.fromRGB(128, 128, 128)
    ClosingLabel.TextSize = 14
    ClosingLabel.TextXAlignment = Enum.TextXAlignment.Center
    
    wait(hideDelay)
    
    local function fadeOut(gui, duration)
        for _, object in ipairs(gui:GetDescendants()) do
            if object:IsA("TextLabel") then
                TweenService:Create(object, TweenInfo.new(duration), {TextTransparency = 1}):Play()
            elseif object:IsA("TextButton") then
                TweenService:Create(object, TweenInfo.new(duration), {TextTransparency = 1}):Play()
            elseif object:IsA("ImageLabel") then
                TweenService:Create(object, TweenInfo.new(duration), {ImageTransparency = 1}):Play()
            elseif object:IsA("Frame") then
                TweenService:Create(object, TweenInfo.new(duration), {BackgroundTransparency = 1}):Play()
            end
        end
    end
    
    fadeOut(ScreenGui, 2)
    wait(2)
    ScreenGui:Destroy()
    accessGranted = true
    configSelected = true
end

repeat task.wait() until accessGranted and configSelected

if not getgenv().Mooze or not getgenv().Mooze["Global"] or not getgenv().Mooze["Global"]["Enabled"] then
    return
end

print("[Mooze] Mobile Mode:", isMobileMode)

-- ============================================
-- MOBILE LOCK BUTTON (ONLY FOR MOBILE MODE)
-- ============================================

local isLocked = false
local lockedTarget = nil
local LockButton = nil

if isMobileMode then
    local LockScreenGui = Instance.new("ScreenGui")
    LockScreenGui.Name = "MoozeLockGui"
    LockScreenGui.Parent = game.CoreGui
    LockScreenGui.ResetOnSpawn = false

    LockButton = Instance.new("TextButton")
    LockButton.Name = "MobileLockButton"
    LockButton.Parent = LockScreenGui
    LockButton.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
    LockButton.BorderColor3 = Color3.fromRGB(255, 0, 0)
    LockButton.BorderSizePixel = 2
    LockButton.Position = UDim2.new(0, 10, 0, 60)
    LockButton.Size = UDim2.new(0, 80, 0, 40)
    LockButton.Font = Enum.Font.SourceSansBold
    LockButton.Text = "LOCK"
    LockButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    LockButton.TextSize = 16
    LockButton.AutoButtonColor = false
    LockButton.ZIndex = 10

    local LockCorner = Instance.new("UICorner")
    LockCorner.CornerRadius = UDim.new(0, 8)
    LockCorner.Parent = LockButton

    print("[Mooze] Mobile lock button created and visible!")
else
    print("[Mooze] PC mode - no lock button (use C key)")
end

-- ============================================
-- OPTIMIZED TARGET SCANNING SYSTEM
-- ============================================

local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local Camera = workspace.CurrentCamera
local RunService = game:GetService("RunService")

local SharedTargetCache = {
    target = nil,
    targetPart = nil,
    lastUpdate = 0,
    updateInterval = 0.033
}

local allowedPartsList = {
    "Head","UpperTorso","HumanoidRootPart","LowerTorso",
    "LeftHand","RightHand","LeftLowerArm","RightLowerArm",
    "LeftUpperArm","RightUpperArm","LeftFoot","LeftLowerLeg",
    "LeftUpperLeg","RightLowerLeg","RightFoot","RightUpperLeg"
}

local bodyPartCache = {}
local cacheTimeout = 2

local function getCachedBodyParts(character)
    local now = tick()
    if not bodyPartCache[character] or (now - (bodyPartCache[character].time or 0)) > cacheTimeout then
        local parts = {}
        for _, partName in ipairs(allowedPartsList) do
            local part = character:FindFirstChild(partName)
            if part then
                table.insert(parts, part)
            end
        end
        bodyPartCache[character] = {parts = parts, time = now}
    end
    return bodyPartCache[character].parts
end

-- ============================================
-- TRIGGER BOT (OPTIMIZED)
-- ============================================

local config = getgenv().Mooze
local triggerConfig = config["Trigger Bot"]
local velocityConfig = config["Velocity Calculation"]

local Circle = Drawing.new("Circle")
Circle.Visible = false
Circle.Transparency = 1
Circle.Color = Color3.new(1,1,1)
Circle.Filled = true
Circle.Radius = triggerConfig["FOV"]["X"] * 5
Circle.NumSides = math.clamp(math.floor(Circle.Radius * 2), 20, 100)
Circle.Position = Vector2.new(Camera.ViewportSize.X/2, Camera.ViewportSize.Y/2)

local lastTriggerScan = 0
local triggerScanInterval = 0.05
local LastActivationTime = 0

local function GetPlayerInCircle()
    local closestDist = math.huge
    local bestPlayer = nil
    local circlePos = Circle.Position
    local radius = Circle.Radius
    local pred = triggerConfig.Prediction
    local velEnabled = velocityConfig.Enabled
    local velMag = velocityConfig.Magnitude
    
    for _, plr in ipairs(Players:GetPlayers()) do
        if plr ~= LocalPlayer and plr.Character then
            local parts = getCachedBodyParts(plr.Character)
            for _, part in ipairs(parts) do
                if part.Transparency < 1 then
                    local pos = part.Position
                    if part.Name == "HumanoidRootPart" then
                        pos = pos + Vector3.new(pred.X, pred.Y, pred.Z)
                        if velEnabled then
                            local v = part.Velocity
                            if v.Magnitude > velMag then
                                pos = pos + v * 0.1
                            end
                        end
                    end
                    
                    local screenPos, onScreen = Camera:WorldToScreenPoint(pos)
                    if onScreen and screenPos.Z > 0 then
                        local dist = (Vector2.new(screenPos.X, screenPos.Y) - circlePos).Magnitude
                        if dist <= radius and dist < closestDist then
                            closestDist = dist
                            bestPlayer = plr
                        end
                    end
                end
            end
        end
    end
    
    return bestPlayer
end

local toggleKey = Enum.KeyCode[triggerConfig.Activation["Activation Bind"]:upper()]
UserInputService.InputBegan:Connect(function(input, gp)
    if not gp and input.KeyCode == toggleKey then
        triggerConfig.Enabled = not triggerConfig.Enabled
        print("[Trigger Bot]", triggerConfig.Enabled and "Enabled" or "Disabled")
        notify("Trigger Bot", triggerConfig.Enabled and "Enabled" or "Disabled", 3)
    end
end)

RunService.Heartbeat:Connect(function(dt)
    lastTriggerScan = lastTriggerScan + dt
    if lastTriggerScan < triggerScanInterval then return end
    lastTriggerScan = 0
    
    if triggerConfig.Enabled then
        local target = GetPlayerInCircle()
        local aimCursor = LocalPlayer:FindFirstChildOfClass("PlayerGui")
            and LocalPlayer.PlayerGui:FindFirstChild("Aim")
        if aimCursor then
            Circle.Position = aimCursor.AbsolutePosition
            Circle.Radius = triggerConfig["FOV"]["X"] * 5
            Circle.NumSides = math.clamp(math.floor(Circle.Radius * 2), 20, 100)
        end
        
        if target and LocalPlayer.Character then
            local tool = LocalPlayer.Character:FindFirstChildOfClass("Tool")
            if tool and tool:FindFirstChild("Handle") then
                local clean = function(t)
                    return t:lower():gsub("[%[%]%- ]","")
                end
                local toolName = clean(tool.Name)
                local allowed = false
                for _, w in ipairs(triggerConfig.Weapons) do
                    if toolName:find(clean(w), 1, true) then
                        allowed = true
                        break
                    end
                end
                
                if allowed and tick() - LastActivationTime >= triggerConfig["Click Cooldown"] then
                    tool:Activate()
                    tool:Deactivate()
                    LastActivationTime = tick()
                end
            end
        end
    end
end)

-- ============================================
-- CAMERA AIMBOT (OPTIMIZED WITH MOBILE LOCK)
-- ============================================

do
    local cameraAimbotConfig = getgenv().Mooze["Camera Aimbot"]
    local globalKeybind = getgenv().Mooze["Global"]["Keybind"] or "E"
    cameraAimbotConfig["Keybind"] = globalKeybind
    cameraAimbotConfig["Snappiness"] = 1
    cameraAimbotConfig["Prediction"]["X"] = 0
    cameraAimbotConfig["Prediction"]["Y"] = 0
    cameraAimbotConfig["Prediction"]["Z"] = 0
    
    local currentCamera = workspace.CurrentCamera
    local aimbotKey = Enum.KeyCode[cameraAimbotConfig["Keybind"]:upper()]
    
    local function isKnocked(character)
        if not character then return false end
        
        local bodyEffects = character:FindFirstChild("BodyEffects")
        if bodyEffects then
            local ko = bodyEffects:FindFirstChild("K.O")
            if ko and ko.Value == true then
                return true
            end
        end
        
        local humanoid = character:FindFirstChildOfClass("Humanoid")
        if humanoid then
            local state = humanoid:GetState()
            if state == Enum.HumanoidStateType.Dead or 
               state == Enum.HumanoidStateType.Physics or
               state == Enum.HumanoidStateType.Ragdoll then
                return true
            end
        end
        
        local rootPart = character:FindFirstChild("HumanoidRootPart")
        if rootPart then
            local grabbed = rootPart:FindFirstChild("GRABBING_CONSTRAINT")
            if grabbed then
                return true
            end
        end
        
        return false
    end
    
    local function getTarget()
        -- STICKY LOCK: If locked, ONLY return the locked target, never search for new ones
        if isLocked and lockedTarget then
            if lockedTarget.Parent and lockedTarget.Parent:FindFirstChild("Humanoid") then
                local humanoid = lockedTarget.Parent:FindFirstChild("Humanoid")
                local character = lockedTarget.Parent
                
                -- Check if target is still alive and not knocked
                if humanoid and humanoid.Health > 0 and not isKnocked(character) then
                    return lockedTarget
                end
            end
            
            -- Target died or got knocked - UNLOCK COMPLETELY, DO NOT SWITCH
            isLocked = false
            lockedTarget = nil
            if LockButton then
                LockButton.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
                LockButton.BorderColor3 = Color3.fromRGB(255, 0, 0)
            end
            notify("Target Lost", "Target died or knocked - unlocked", 2)
            cameraAimbotConfig["Enabled"] = false
            return nil
        end
        
        -- If not locked, don't return any target (no auto-lock behavior)
        return nil
    end
    
    local function findClosestPlayerToMouse()
        local bestTarget = nil
        local shortestDist = math.huge
        local mousePos = UserInputService:GetMouseLocation()
        
        for _, player in ipairs(Players:GetPlayers()) do
            if player ~= LocalPlayer and player.Character then
                if not isKnocked(player.Character) then
                    local hrp = player.Character:FindFirstChild("HumanoidRootPart")
                    if hrp then
                        local screenPos, onScreen = currentCamera:WorldToViewportPoint(hrp.Position)
                        if onScreen and screenPos.Z > 0 then
                            local dist = (Vector2.new(screenPos.X, screenPos.Y) - mousePos).Magnitude
                            if dist < shortestDist then
                                shortestDist = dist
                                bestTarget = hrp
                            end
                        end
                    end
                end
            end
        end
        
        return bestTarget
    end
    
    local function findClosestPlayerToCenter()
        local bestTarget = nil
        local shortestDist = math.huge
        local centerScreen = Vector2.new(currentCamera.ViewportSize.X / 2, currentCamera.ViewportSize.Y / 2)
        
        for _, player in ipairs(Players:GetPlayers()) do
            if player ~= LocalPlayer and player.Character then
                if not isKnocked(player.Character) then
                    local hrp = player.Character:FindFirstChild("HumanoidRootPart")
                    if hrp then
                        local screenPos, onScreen = currentCamera:WorldToViewportPoint(hrp.Position)
                        if onScreen and screenPos.Z > 0 then
                            local dist = (Vector2.new(screenPos.X, screenPos.Y) - centerScreen).Magnitude
                            if dist < shortestDist then
                                shortestDist = dist
                                bestTarget = hrp
                            end
                        end
                    end
                end
            end
        end
        
        return bestTarget
    end
    
    -- Lock button logic (only if mobile mode)
    if isMobileMode and LockButton then
        print("[Mooze] Setting up mobile lock button click handler")
        LockButton.MouseButton1Click:Connect(function()
            if not isLocked then
                local bestTarget = findClosestPlayerToCenter()
                
                if bestTarget then
                    isLocked = true
                    lockedTarget = bestTarget
                    LockButton.BackgroundColor3 = Color3.fromRGB(0, 100, 0)
                    LockButton.BorderColor3 = Color3.fromRGB(0, 255, 0)
                    TweenService:Create(LockButton, TweenInfo.new(0.2), {BackgroundColor3 = Color3.fromRGB(0, 150, 0)}):Play()
                    
                    local player = Players:GetPlayerFromCharacter(bestTarget.Parent)
                    if player then
                        notify("Locked On", player.Name .. " (Mobile Mode)", 3)
                    end
                    
                    cameraAimbotConfig["Enabled"] = true
                else
                    notify("No Target", "No valid player found", 2)
                end
            else
                -- Manual unlock
                isLocked = false
                lockedTarget = nil
                cameraAimbotConfig["Enabled"] = false
                LockButton.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
                LockButton.BorderColor3 = Color3.fromRGB(255, 0, 0)
                notify("Unlocked", "Lock disabled", 2)
            end
        end)
    end
    
    -- PC Mode: C key toggle lock (closest to mouse)
    if not isMobileMode then
        UserInputService.InputBegan:Connect(function(input, processed)
            if processed then return end
            if input.KeyCode == aimbotKey then
                if not isLocked then
                    local bestTarget = findClosestPlayerToMouse()
                    
                    if bestTarget then
                        isLocked = true
                        lockedTarget = bestTarget
                        
                        local player = Players:GetPlayerFromCharacter(bestTarget.Parent)
                        if player then
                            notify("Locked On", player.Name .. " (PC Mode)", 3)
                        end
                        
                        cameraAimbotConfig["Enabled"] = true
                    else
                        notify("No Target", "No valid player near mouse", 2)
                    end
                else
                    -- Manual unlock
                    isLocked = false
                    lockedTarget = nil
                    cameraAimbotConfig["Enabled"] = false
                    notify("Unlocked", "Lock disabled", 2)
                end
            end
        end)
    end
    
    UserInputService.InputBegan:Connect(function(input, processed)
        if processed then return end
        if input.KeyCode == aimbotKey then
            if isMobileMode then
                -- Mobile mode already handled by button
                return
            end
        end
    end)
    
    RunService.RenderStepped:Connect(function()
        if cameraAimbotConfig["Enabled"] then
            local targetPart = getTarget()
            if targetPart then
                local targetPos = targetPart.Position
                currentCamera.CFrame = CFrame.new(currentCamera.CFrame.Position, targetPos)
            end
        end
    end)
end

-- ============================================
-- SILENT AIMBOT (OPTIMIZED)
-- ============================================

do
    local Config = getgenv().Mooze["Silent Aimbot"]
    local LocalPlayer = Players.LocalPlayer
    local Camera = workspace.CurrentCamera
    local Mouse = LocalPlayer:GetMouse()
    local lastMousePos = Vector2.new(0,0)
    local cachedTarget = nil
    
    local function getClosestPart(player)
        local bestPart, bestDist = nil, math.huge
        local pointScale = Config["Closest Point"] and Config["Closest Point"]["Point Scale"] or 1.0
        if player.Character then
            local parts = getCachedBodyParts(player.Character)
            for _, part in ipairs(parts) do
                local screenPos, onScreen = Camera:WorldToViewportPoint(part.Position)
                if onScreen and screenPos.Z > 0 then
                    local partPos = Vector2.new(screenPos.X, screenPos.Y)
                    local dist = (lastMousePos - partPos).Magnitude * pointScale
                    if dist < bestDist then
                        bestPart, bestDist = part, dist
                    end
                end
            end
        end
        return bestPart
    end
    
    local FOVCircle = Drawing.new("Circle")
    FOVCircle.Visible = Config["FOV"]["Enabled"]
    FOVCircle.Transparency = 1
    FOVCircle.Thickness = 2
    FOVCircle.NumSides = 100
    FOVCircle.Filled = false
    
    local lastFOVUpdate = 0
    local fovUpdateInterval = 0.033
    
    local function updateFOV()
        lastMousePos = UserInputService:GetMouseLocation()
        local fovConfig = Config["FOV"]
        local currentTool = nil
        if LocalPlayer.Character then
            currentTool = LocalPlayer.Character:FindFirstChildOfClass("Tool")
        end
        local radius = fovConfig["Size"].X * 5
        if fovConfig["Weapons Configuration"] and fovConfig["Weapons Configuration"]["Enabled"] and currentTool then
            local weaponName = string.lower(currentTool.Name or "")
            if string.find(weaponName, "shotgun") then
                radius = fovConfig["Weapons Configuration"]["Shotguns"].X * 5
            elseif string.find(weaponName, "pistol") then
                radius = fovConfig["Weapons Configuration"]["Pistols"].X * 5
            end
        end
        FOVCircle.Radius = radius
        FOVCircle.NumSides = math.clamp(math.floor(radius * 2), 20, 100)
        FOVCircle.Position = lastMousePos
        FOVCircle.Visible = Config["FOV"]["Enabled"]
        
        local bestPart, bestDist = nil, math.huge
        for _, player in pairs(Players:GetPlayers()) do
            if player ~= LocalPlayer and player.Character then
                local part = nil
                if Config["Hit Part"] == "Closest Point" then
                    part = getClosestPart(player)
                else
                    part = player.Character:FindFirstChild("Head")
                end
                if part then
                    local screenPos, onScreen = Camera:WorldToViewportPoint(part.Position)
                    if onScreen and screenPos.Z > 0 then
                        local partPos = Vector2.new(screenPos.X, screenPos.Y)
                        local dist = (lastMousePos - partPos).Magnitude
                        if dist < bestDist and dist <= radius then
                            bestPart, bestDist = part, dist
                        end
                    end
                end
            end
        end
        cachedTarget = bestPart
    end
    
    RunService.Heartbeat:Connect(function(dt)
        lastFOVUpdate = lastFOVUpdate + dt
        if lastFOVUpdate >= fovUpdateInterval then
            lastFOVUpdate = 0
            updateFOV()
        end
    end)
    
    local function applyPrediction(cf, offset)
        return cf * CFrame.new(offset.X, offset.Y, offset.Z)
    end
    
    if CAPABILITIES.canMetatable then
        local success = pcall(function()
            local mt = getrawmetatable(game)
            setreadonly(mt, false)
            local oldIndex = mt.__index
            mt.__index = newcclosure(function(obj, prop)
                if obj:IsA("Mouse") and (prop == "Hit" or prop == "Target") then
                    local target = cachedTarget
                    if target then
                        local prediction = Config["Prediction"]
                        local redir = Config["Client Bullet Redirection"]
                        local currentTool = (LocalPlayer.Character and LocalPlayer.Character:FindFirstChildOfClass("Tool")) or nil
                        if redir["Enabled"] and currentTool then
                            local toolName = tostring(currentTool.Name)
                            for _, weapon in ipairs(redir["Weapons"]) do
                                if string.find(string.lower(toolName), string.lower(weapon)) then
                                    prediction = redir["Prediction"]
                                    break
                                end
                            end
                        end
                        local predMultiplier = Vector3.new(prediction.X, prediction.Y, prediction.Z)
                        local offset = target.Velocity * predMultiplier
                        if prop == "Hit" then
                            return applyPrediction(target.CFrame, offset)
                        else
                            return target
                        end
                    end
                end
                return oldIndex(obj, prop)
            end)
        end)
        
        if success then
            print("[Silent Aimbot] Metatable hooking enabled")
        else
            warn("[Silent Aimbot] Metatable hooking failed, using basic mode")
            notify("Silent Aimbot", "Running in basic mode", 5)
        end
    else
        warn("[Silent Aimbot] Metatable hooking not supported on this executor")
        notify("Silent Aimbot", "Limited mode (no metatable)", 5)
    end
end

-- ============================================
-- RAPID FIRE
-- ============================================

local is_firing = false
local utility = {}

utility.get_gun = function()
    for _, tool in next, game.Players.LocalPlayer.Character:GetChildren() do
        if tool:IsA("Tool") and tool:FindFirstChild("Ammo") then
            return tool
        end
    end
end

utility.rapid = function(tool)
    tool:Activate()
end

game:GetService("UserInputService").InputBegan:Connect(function(i)
    if i.UserInputType == Enum.UserInputType.MouseButton1 then
        local gun = utility.get_gun()
        if gun and not is_firing then
            is_firing = true
            local gunName = gun.Name
            local multiplier = 1
            local slowdownConfig = getgenv().Mooze["Movement Modifications"]["Slowdown Modifications"]
            if slowdownConfig and slowdownConfig["Enabled"] then
                local weaponConfig = slowdownConfig["Weapons"][gunName]
                if weaponConfig then
                    multiplier = weaponConfig["Multiplier"] or 1
                end
            end
            local fireRateDelay = multiplier
            while is_firing do
                utility.rapid(gun)
                task.wait(fireRateDelay)
            end
        end
    end
end)

game:GetService("UserInputService").InputEnded:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 then
        is_firing = false
    end
end)

-- ============================================
-- SPREAD MODIFICATIONS
-- ============================================

local spreadConfig = getgenv().Mooze
    and getgenv().Mooze['Weapon Modifications']
    and getgenv().Mooze['Weapon Modifications']['Spread Modifications']

local originalHorizontal = 0.1
local originalVertical = 0.1

local function normalize(s)
    return tostring(s):lower():gsub("%W", "")
end

local function applySpread()
    if not spreadConfig or not spreadConfig.Enabled then
        return
    end
    
    for weaponKey, settings in pairs(spreadConfig) do
        if weaponKey ~= "Enabled" and type(settings) == "table" then
            local mult = settings.Multiplier
            local hSpread = originalHorizontal * mult
            local vSpread = originalVertical * mult
            local keyNorm = normalize(weaponKey)
            
            for _, fn in ipairs(getgc(true)) do
                if type(fn) == "function"
                and islclosure(fn)
                and not isexecutorclosure(fn)
                then
                    local info = debug.getinfo(fn)
                    if info and info.short_src then
                        local srcNorm = normalize(info.short_src)
                        if srcNorm:find(keyNorm, 1, true) then
                            for idx, const in ipairs(debug.getconstants(fn)) do
                                if type(const) == "number" then
                                    if const > 0 and const < 0.1 then
                                        debug.setconstant(fn, idx, hSpread)
                                    elseif const >= 0.1 and const < 0.3 then
                                        debug.setconstant(fn, idx, vSpread)
                                    end
                                end
                            end
                        end
                    end
                end
            end
        end
    end
end

applySpread()

if player.Character then
    applySpread()
end
player.CharacterAdded:Connect(function()
    task.wait(1)
    applySpread()
    bodyPartCache = {}
end)

-- ============================================
-- WALKSPEED MODIFICATIONS (WALKSPEED-BASED)
-- ============================================

local Mooze = getgenv().Mooze
local SpeedConfig = Mooze["Movement Modifications"]["Speed Modifications"]

print("[Walkspeed] Config Enabled:", SpeedConfig.Enabled)
if SpeedConfig.Enabled then
    print("[Walkspeed] Normal Multiplier:", SpeedConfig.Normal.Multiplier)
end

if SpeedConfig.Enabled then
    local character = player.Character or player.CharacterAdded:Wait()
    local humanoid = character:FindFirstChildOfClass("Humanoid") or character:WaitForChild("Humanoid")
    
    local isShooting = false
    local isReloading = false
    local LOW_HEALTH_THRESHOLD = 50
    
    local mouse = player:GetMouse()
    
    mouse.Button1Down:Connect(function()
        isShooting = true
    end)
    
    mouse.Button1Up:Connect(function()
        isShooting = false
    end)
    
    UserInputService.InputBegan:Connect(function(input, gameProcessed)
        if gameProcessed then return end
        if input.KeyCode == Enum.KeyCode.R and not isReloading then
            isReloading = true
            task.delay(1.5, function()
                isReloading = false
            end)
        end
    end)
    
    player.CharacterAdded:Connect(function(char)
        character = char
        humanoid = char:FindFirstChildOfClass("Humanoid") or char:WaitForChild("Humanoid")
        isShooting = false
        isReloading = false
    end)
    
    RunService.RenderStepped:Connect(function()
        if not SpeedConfig.Enabled then return end
        if not humanoid or humanoid.Health <= 0 then return end
        
        local speed = SpeedConfig.Normal and SpeedConfig.Normal.Multiplier or humanoid.WalkSpeed
        
        if humanoid.Health < LOW_HEALTH_THRESHOLD and SpeedConfig["Low Health"] then
            speed = SpeedConfig["Low Health"].Multiplier
        elseif isReloading and SpeedConfig.Reloading then
            speed = SpeedConfig.Reloading.Multiplier
        elseif isShooting and SpeedConfig.Shooting then
            speed = SpeedConfig.Shooting.Multiplier
        end
        
        if humanoid.WalkSpeed ~= speed then
            humanoid.WalkSpeed = speed
        end
    end)
    
    print("[Walkspeed] WalkSpeed-based system enabled")
    print("[Walkspeed] Speed:", SpeedConfig.Normal.Multiplier)
else
    print("[Walkspeed] Disabled by config")
end

print("[Mooze] Script loaded successfully!")
print("[Mooze] Executor:", exe_name)
print("[Mooze] Features:", CAPABILITIES.canMetatable and "Full" or "Limited")
notify("Mooze Ready", "All features loaded successfully!", 4)
notify("Performance", "Optimized for 30+ FPS", 4)
